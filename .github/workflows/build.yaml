name: CI

on:
  push:
    branches:
      - '*'
    tags:
      - 'v*'

env:
  REGISTRY: quay.io
  IMAGE_NAME: stackstate/sts-opentelemetry-collector
  GO_VERSION: 1.21.6
  GOLANGCI_LINT_VERSION: v2.3.1

jobs:
  build:
    runs-on: ubuntu-latest
    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
        contents: read
        packages: write
    outputs:
      image: ${{ steps.meta.outputs.tags }}
      digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          labels: |
            org.opencontainers.image.source=https://github.com/${{github.repository_owner}}/${{ github.repository }}
      - name: Install protoc # TODO create a docker image with protoc installed
        run: |
          sudo apt-get install -y protobuf-compiler
          go install google.golang.org/protobuf/cmd/protoc-gen-go@v1.36.8
      - name: Generate go model
        env:
          GITLAB_READ_TOKEN: ${{ secrets.GITLAB_READ_TOKEN }}
        run: |
          ./connector/tracetotopoconnector/scripts/generate_protobuf_model.sh
          ./extension/settingsproviderextension/scripts/generate_openapi_model.sh
          ./scripts/check_no_changes.sh
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to the container registry
        uses: docker/login-action@v3
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USER }}
          password: ${{ secrets.QUAY_PASSWORD }}
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64/v8
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  detect-modules:
    runs-on: ubuntu-latest
    outputs:
      modules: ${{ steps.set-modules.outputs.modules }}
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - id: set-modules
        run: echo "modules=$(go list -m -json | jq -s '.' | jq -c '[.[].Dir]')" >> $GITHUB_OUTPUT

  lint:
    needs: detect-modules
    runs-on: ubuntu-latest
    strategy:
      matrix:
        modules: ${{ fromJSON(needs.detect-modules.outputs.modules) }}
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: golangci-lint ${{ matrix.modules }}
        uses: golangci/golangci-lint-action@v8
        with:
          version: ${{ env.GOLANGCI_LINT_VERSION }}
          working-directory: ${{ matrix.modules }}

  test:
    runs-on: ubuntu-latest
    services:
      clickhouse:
        image: clickhouse/clickhouse-server:latest
        ports:
          - "9000:9000"
          - "8123:8123"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Run tests
        run: |
          go test ./exporter/clickhousestsexporter/...
          go test ./exporter/stskafkaexporter/...
          go test ./exporter/ststopologyexporter/...
          go test ./extension/servicetokenauthextension/...
          go test ./extension/settingsproviderextension/...
          go test ./connector/stsservicegraphconnector/...
          go test ./connector/tracetotopoconnector/...
  integration-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21.6'
      - name: Set up Docker
        uses: docker/setup-buildx-action@v3
      - name: Run integration tests
        run: |
          go test -tags=integration ./exporter/stskafkaexporter/...
          go test -tags=integration ./extension/settingsproviderextension/...
  e2e-test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.7'
      - name: Set up Docker
        uses: docker/setup-buildx-action@v3
      - name: Run E2E tests
        env:
          OTEL_COLLECTOR_IMAGE: ${{ needs.build.outputs.image }}@${{ needs.build.outputs.digest }}
        run: go test -v ./test/e2e/...
